name: Create simple-container
on: 
  push:
    branches:
    - master
  # This means that you can run it by yourself
  # gh workflow run pipeline.yml -f someTest=simonstest
  workflow_dispatch:
    inputs:
      someTest:
        description: 'Some test value'
        required: true
        default: 'defaultValue'
      kickoffTime:
        description: The actual time that the race started
        required: true
        default: "Friday, May 6, 2022 1:00:00 PM"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  READY_URL: https://webhook.site/8741704d-b2a4-4fab-b47b-1086afec814f

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    #https://github.community/t/pass-variable-into-step-using-powershell/141423/2
    - name: Set start time
      shell: pwsh
      run: |
        echo "START_TIME=$(Get-Date)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
  
    - name: Checkout repository ðŸ”Ž
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Log in to the Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Push stop stoptime and diff
      shell: pwsh
      run: |
        $kickoffTimeParsed = "Friday, May 6, 2022 1:00:00 PM"
        if ("${{github.event.inputs.kickoffTime}}".length -gt 0)
        {
          $kickoffTimeParsed = [DateTime]"${{github.event.inputs.kickoffTime}}"
        }
        
        $startTimeParsed = [DateTime]${Env:START_TIME}
        $endTimeParsed = Get-Date
        $stepsSeconds = ($endTimeParsed-$startTimeParsed).TotalSeconds
        $totalSeconds = ($endTimeParsed-$kickoffTimeParsed).TotalSeconds
        $body = @{
          source = 'Github Actions'
          kickoffTime = $kickoffTimeParsed
          startTime = $startTimeParsed
          endTime = $endTimeParsed
          stepsSeconds = $stepsSeconds
          totalSeconds = $totalSeconds
          inputValue = '${{github.event.inputs.someTest}}'
        }

        Invoke-RestMethod -Method 'Post' -Uri '${{Env.READY_URL}}' -Body $body
